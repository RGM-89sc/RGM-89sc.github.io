{"version":3,"sources":["webpack://rgm_blog/./src/components/content/content.tsx","webpack://rgm_blog/./src/components/content/index.tsx","webpack://rgm_blog/./src/pages/category-list/category-list.tsx","webpack://rgm_blog/./src/pages/category-list/index.tsx","webpack://rgm_blog/./src/tools/articlesManage.ts"],"names":["state","store","dispatch","props","contentWidth","useContentWidth","contentBoxStyle","theme","common","text","bg","contentStyle","css","children","setHeaderType","headerType","categoryListCss","tagsMap","getAllTags","searchArticles","tag","route","history","push","Object","keys","map","className","key","onClick","count","this","init","getInstance","instance","ArticlesManage","_posts","window","localStorage","getItem","articleMap","JSON","parse","deepClone","data","stringify","getArticleDate","article","Date","content","meta","time","replace","stat","birthtime","orderByBirthTimeDesc","articles_desc","articles","result","sort","aKey","bKey","getTime","id","getArticlesByCategory","category","filter","tags","includes","getArticleById","Array","values","forEach","articleTags","length","getArticlesByKeyword","keyword","RegExp","test","name"],"mappings":"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","file":"js/149.baec41ce.bundle.js","sourcesContent":["/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/react'\r\nimport React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Dispatch } from 'redux'\r\nimport { StoreState } from '@Types/storeState'\r\nimport useContentWidth from '@Hooks/useContentWidth'\r\n\r\ninterface IProps {\r\n  store: StoreState;\r\n  children?: React.ReactChild\r\n}\r\n\r\nfunction Content (props: IProps) {\r\n  const contentWidth = useContentWidth()\r\n\r\n  const contentBoxStyle = css`\r\n    box-sizing: border-box;\r\n    padding: 1rem 1rem 100px;\r\n    width: 100%;\r\n    color: ${props.store.theme.common.text};\r\n    background-color: ${props.store.theme.common.bg};\r\n  `\r\n\r\n  const contentStyle = css`\r\n    box-sizing: border-box;\r\n    margin: 0 auto;\r\n    width: ${contentWidth};\r\n    height: 100%;\r\n  }`\r\n\r\n  return (\r\n    <div css={contentBoxStyle}>\r\n      <div css={contentStyle}>\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: any) {\r\n  return {\r\n    store: state\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch: Dispatch) {\r\n  return {\r\n    \r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(React.memo(Content))","import Content from './content'\r\nexport default Content","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/react'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setHeaderTypeAction } from '@Store/actions'\r\nimport { Dispatch } from 'redux'\r\nimport { StoreState } from '@Types/storeState'\r\nimport { ArticlesManage } from '@Tools/articlesManage'\r\nimport useContentWidth from '@Hooks/useContentWidth'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { Path, LocationDescriptorObject } from 'history'\r\nimport Content from '@Components/content'\r\n\r\ninterface IProps extends RouteComponentProps {\r\n  store: StoreState\r\n  setHeaderType: (headerType: string) => any\r\n}\r\n\r\nfunction CateoryList(props: IProps) {\r\n  const contentWidth = useContentWidth()\r\n\r\n  const categoryListCss = css`\r\n    .category {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      padding: 20px;\r\n\r\n      .tag-name {\r\n        font-size: 1.5rem;\r\n        cursor: pointer;\r\n      }\r\n\r\n      .count {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 40px;\r\n        height: 40px;\r\n        border-radius: 50%;\r\n        font-size: 1.5rem;\r\n        background-color: #eee;\r\n      }\r\n    }\r\n  `\r\n\r\n  const articlesManage = ArticlesManage.getInstance()\r\n  const tagsMap = articlesManage.getAllTags()\r\n\r\n  function searchArticles(tag: string) {\r\n    routeTo('/?category=' + tag)\r\n  }\r\n\r\n  function routeTo (route: Path | LocationDescriptorObject) {\r\n    if (typeof route === 'string') {\r\n      props.history.push(route)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <Content>\r\n      <div css={categoryListCss}>\r\n        {Object.keys(tagsMap).map(tag => (\r\n          <div className=\"category\" key={tag}>\r\n            <span className=\"tag-name\" onClick={() => searchArticles(tag)}>{tag}</span>\r\n            <span className=\"count\">{tagsMap[tag].count}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Content>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: any) {\r\n  return {\r\n    store: state\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch: Dispatch) {\r\n  return {\r\n    setHeaderType: (headerType: string) => dispatch(setHeaderTypeAction(headerType))\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(React.memo(CateoryList))","import CategoryList from './category-list'\r\nexport default CategoryList","import { ArticleObj, TagsMap } from \"@Types/article\"\r\n\r\ninterface ArticleMap {\r\n  [id: string]: ArticleObj\r\n}\r\n\r\nexport class ArticlesManage {\r\n  static instance: ArticlesManage\r\n  articleMap!: ArticleMap\r\n  static articles_desc: ArticleObj[]\r\n  static tagsMap: TagsMap\r\n\r\n  constructor() {\r\n    this.init()\r\n  }\r\n\r\n  static getInstance() {\r\n    if (!this.instance) {\r\n      this.instance = new ArticlesManage()\r\n    }\r\n    return this.instance\r\n  }\r\n\r\n  init() {\r\n    const _posts = window.localStorage.getItem('_posts') || '{}'\r\n    this.articleMap = JSON.parse(_posts)\r\n  }\r\n\r\n  private deepClone<T>(data: T): T {\r\n    return JSON.parse(JSON.stringify(data || ''))\r\n  }\r\n\r\n  getArticleDate(article: ArticleObj): Date {\r\n    return new Date(article.content.meta.time.replace(/-/g, '/') || article.stat.birthtime)\r\n  }\r\n\r\n  // 按时间倒序排序\r\n  orderByBirthTimeDesc(): ArticleObj[] {\r\n    if (ArticlesManage.articles_desc) {\r\n      return ArticlesManage.articles_desc\r\n    }\r\n    const articles = this.deepClone(this.articleMap)\r\n    const keys = Object.keys(articles).sort((aKey: string, bKey: string) => {\r\n      return this.getArticleDate(articles[bKey]).getTime() - this.getArticleDate(articles[aKey]).getTime()\r\n    })\r\n    const result = keys.map(key => {\r\n      articles[key].id = key\r\n      return articles[key]\r\n    })\r\n    ArticlesManage.articles_desc = result\r\n    return result\r\n  }\r\n\r\n  getArticlesByCategory(category: string): ArticleObj[] {\r\n    const articles = this.orderByBirthTimeDesc()\r\n    return articles.filter((article: ArticleObj) => article.content.meta.tags.includes(category))\r\n  }\r\n\r\n  getArticleById(id: string): ArticleObj {\r\n    return this.deepClone(this.articleMap[id])\r\n  }\r\n\r\n  getAllTags(): TagsMap {\r\n    if (ArticlesManage.tagsMap instanceof Array) {\r\n      return ArticlesManage.tagsMap\r\n    }\r\n    const tagsMap: TagsMap = {}\r\n    const articles = this.deepClone(this.articleMap)\r\n    Object.values<ArticleObj>(articles).forEach((article: ArticleObj) => {\r\n      const articleTags = article.content.meta.tags\r\n      articleTags.length > 0 && articleTags.forEach((tag: string) => {\r\n        tagsMap[tag] ? tagsMap[tag].count++ : tagsMap[tag] = { count: 1 }\r\n      })\r\n    })\r\n    ArticlesManage.tagsMap = tagsMap\r\n    return tagsMap\r\n  }\r\n\r\n  getArticlesByKeyword(keyword: string): ArticleObj[] {\r\n    if (!keyword) {\r\n      return []\r\n    }\r\n    return this.orderByBirthTimeDesc().filter(article => {\r\n      if (new RegExp(keyword).test(article.name || '')) {\r\n        return true\r\n      }\r\n      return false\r\n    })\r\n  }\r\n}\r\n"],"sourceRoot":""}